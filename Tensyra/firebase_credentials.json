







{
    "type": "service_account",
    "project_id": "tensyra-app",
    "private_key_id": "db07235e7aac77ed8fbe1cfe7779da4931e6ac22",
    "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDMyTv4SPyPhiG1\nDO4/Cv3apDLN/h67Irl1XiM56nkwJ1WxKarVGh6J07/7IdETtr2Izg2JDb0UpYuz\nmSuZprs9GreSoklV3OSbc445F8+EOCpPYGnTFmeCTBvuMJVZneTRkMxFFNvSQ3lW\ni0taBehWjcNDIXxGX3amLz3qy2CCyKd3mirlhEj8E49nZ1rfo5UNL1DUJpj6cgJv\nHgkPjAA5Q9ZCaalcosqEiIsFuPW2S9Ei5oL57wAufGSQsOcPFX2bzyqzGDTNndOH\nYg26M+kOUGQq9r7BW/kwQIp5yF+6eohusXqkjW+OgyOWicr5JuntgtxKOicqprs9\n+krUQ75DAgMBAAECggEAGNpFKmUlLX/gQFow4brCQxIRTlmMPjbBHiLOEJ3JllP3\nvNfrMRCJ6z0k++PHPWa8islC8EKYE1Th5upsVanb6FcBN0z1rHNx1QHJnVkr6IZu\ncBKp1SHPbwswipAf1+/nEJ3LhIi7AsIIjD28Z9D2uOZcb521OM8mFZX/JCsJa+WZ\nbuTq0JdZTfcC5SqaCR4LClk/2vVf39TjEHOShqybfdp2rEf8gZR9GHRBSiKenj4a\niVMAm8eBLk+HNjd6BIdzMynvsYTyeaKPr5kolXSIxjl4bls7pWNJYAj2RbeCyoZn\n7/ydVxrIygUTKI06thZPGLmrrYrujj7D+EaRJBdOQQKBgQDycL0Et3NQ5inAU1X+\nZrXuxlGjM1Ax8RJmYo5vwcNOayDrwEsNV29mjEN0QIo+UkWimFGbT+IC44ztNBZT\n77xLcggHec41VryUFnQeqDbEhqdlSj6veGhFWlzlSAs8nZNPiVVWAUG6gFX0xJGv\no+TXk5U/FFAz5GtzCNGQbTW8wQKBgQDYPVyF1vZ3ZDr9Prtd7gnbPoEJiCSChIuI\nPjzAADmRv4ZfkJk/xR3NrI34AL9joNWie0aD9Kgh6VZiPTcgCY8NvWZKjs49Hbhw\nuwNVGYROEztH6ndlUTGrldN6PCBKCsJq4sykfng90xn6QS3d6O6KT7t8X3a/4cgL\nnTgA61yIAwKBgA+1/JnMpZ1tfPEotV7qGwohMfMohR7nZ3DZHC/j15tCV/zPFk4E\nB4UWu9xRvmOxgy+5PTiaYaQcSOqqQHQqCgK9ngWWACX2u/vAxL+j2QC9VSW8PPm0\nDNXJuFFnbMr9zykNVklfhXnnjSpyfppqPY820ionT9c9CzWGMcZxPVVBAoGAaxho\n3HiMdLEVbhtFnM2p4AXizp+4xVNz77QzTjxORtr+aBIrdCPiEN0nKu7j2ynq5J/9\nWpkvNCxmdh0vUhSp3vow0ThM+IPhtyNIETukBS8NKx76pxlBamO361AgBcuyYlGV\nXNquHqCQuxrQ5pjYm3PFvWFiZMIj22ywMfRfTZUCgYEA57iBFYDeNRX7oAS8vWtm\nh2gtxY6I2XCoQGAtlllntENzWEsROYFDKnU6QPehksdYY8c89rHtJ8wRoyJ2PKzY\n4oAATMv8ztVihQMygGyFh0gIQpmFtMqpzh/FPIUG/6QUqtzyQPOJ/ugKM00psneC\n8/tX2KtXmcnM6TaYMqnnzb0=\n-----END PRIVATE KEY-----\n",
    "client_email": "firebase-adminsdk-fbsvc@tensyra-app.iam.gserviceaccount.com",
    "client_id": "106863371932509781064",
    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
    "token_uri": "https://oauth2.googleapis.com/token",
    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
    "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-fbsvc%40tensyra-app.iam.gserviceaccount.com",
    "universe_domain": "googleapis.com"
  }
  

# firebase_config.py
import firebase_admin
from firebase_admin import credentials, auth, firestore

def init_firebase():
    cred = credentials.Certificate("firebase_credentials.json")
    firebase_admin.initialize_app(cred)
    return firestore.client()

    # In firebase_config.py
def log_meal_to_firestore(user_id, meal_data):
    db = init_firebase()
    db.collection("users").document(user_id).collection("meals").add(meal_data)

    # Add to firebase_config.py
def store_tomorrow_macros(user_id, date_str, macro_data):
    db = init_firebase()
    db.collection("users").document(user_id).collection("targets").document(date_str).set(macro_data)

    # auth.py
import firebase_admin
from firebase_admin import auth, credentials
import streamlit as st
import json

def init_firebase():
    if not firebase_admin._apps:
        cred = credentials.Certificate("firebase_credentials.json")
        firebase_admin.initialize_app(cred)

def sign_up(email, password):
    try:
        user = auth.create_user(email=email, password=password)
        return user.uid
    except Exception as e:
        st.error(f"Signup error: {str(e)}")
        return None

def sign_in(email, password):
    # Firebase Admin SDK doesn't support password verification
    st.warning("Admin SDK cannot verify passwords. For production, use a custom backend or identity provider.")
    return email  # Simulate user ID as email
